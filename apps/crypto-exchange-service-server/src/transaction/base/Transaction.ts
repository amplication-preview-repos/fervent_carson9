/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { ObjectType, Field } from "@nestjs/graphql";
import { ApiProperty } from "@nestjs/swagger";
import {
  IsNumber,
  Min,
  Max,
  IsOptional,
  IsDate,
  ValidateNested,
  IsString,
  IsEnum,
} from "class-validator";
import { Type } from "class-transformer";
import { Currency } from "../../currency/base/Currency";
import { Order } from "../../order/base/Order";
import { EnumTransactionStatus } from "./EnumTransactionStatus";
import { EnumTransactionTypeField } from "./EnumTransactionTypeField";
import { Wallet } from "../../wallet/base/Wallet";

@ObjectType()
class Transaction {
  @ApiProperty({
    required: false,
    type: Number,
  })
  @IsNumber()
  @Min(-999999999)
  @Max(999999999)
  @IsOptional()
  @Field(() => Number, {
    nullable: true,
  })
  amount!: number | null;

  @ApiProperty({
    required: true,
  })
  @IsDate()
  @Type(() => Date)
  @Field(() => Date)
  createdAt!: Date;

  @ApiProperty({
    required: false,
    type: () => Currency,
  })
  @ValidateNested()
  @Type(() => Currency)
  @IsOptional()
  currency?: Currency | null;

  @ApiProperty({
    required: true,
    type: String,
  })
  @IsString()
  @Field(() => String)
  id!: string;

  @ApiProperty({
    required: false,
    type: () => [Order],
  })
  @ValidateNested()
  @Type(() => Order)
  @IsOptional()
  orders?: Array<Order>;

  @ApiProperty({
    required: false,
    enum: EnumTransactionStatus,
  })
  @IsEnum(EnumTransactionStatus)
  @IsOptional()
  @Field(() => EnumTransactionStatus, {
    nullable: true,
  })
  status?: "Option1" | null;

  @ApiProperty({
    required: false,
    enum: EnumTransactionTypeField,
  })
  @IsEnum(EnumTransactionTypeField)
  @IsOptional()
  @Field(() => EnumTransactionTypeField, {
    nullable: true,
  })
  typeField?: "Option1" | null;

  @ApiProperty({
    required: true,
  })
  @IsDate()
  @Type(() => Date)
  @Field(() => Date)
  updatedAt!: Date;

  @ApiProperty({
    required: false,
    type: () => Wallet,
  })
  @ValidateNested()
  @Type(() => Wallet)
  @IsOptional()
  wallet?: Wallet | null;
}

export { Transaction as Transaction };
